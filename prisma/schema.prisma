// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  username          String? @unique
  bio               String?
  role              Role @default(STAFF)
  department        String?
  email             String? @unique
  emailVerified     DateTime?
  image             String?
  coverImage        String?
  profileImage      String?
  hashedPassword    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  FollowingIds      String[] @db.ObjectId
  hasNotification   Boolean?

  posts             Post[]
  comments          Comment[]
  Notifications     Notification[]
}

model Post {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  body              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  anonymous         Boolean?
  userId            String @db.ObjectId
  likesIds          String[] @db.ObjectId
  categoryId        String @db.ObjectId

  category          Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  comments          Comment[]
}

model Comment {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  body              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String @db.ObjectId
  postId            String @db.ObjectId

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post              Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  body              String
  userId            String @db.ObjectId
  createdAt         DateTime @default(now())

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  name              String

  posts             Post[]
}

enum Role {
  QA_MANAGER
  QA_COORDINATOR
  STAFF
}

enum Department {
  ACADEMIC
  SUPPORT
}